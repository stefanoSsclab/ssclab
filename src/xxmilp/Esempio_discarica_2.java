package xxmilp;

import it.ssc.log.SscLogger;
import it.ssc.pl.milp.*;
import it.ssc.pl.milp.util.MILPThreadsNumber;

import java.util.ArrayList;
import static it.ssc.pl.milp.LP.NaN;
public class Esempio_discarica_2 {
     
    public static void main(String[] args) throws Exception {
 
        double A[][]={ 
                //{ 18.4,	16.6,16.2,		18.4,16.6,16.2,		18.4,16.6,16.2,		7.5,7.5,7,		7.5,7.5,7,		21.4,16.6,13.2,		21.4,16.6,13.2,		21.4,16.6,13.2,		10.5,7.5,5.5,		10.5,7.5,5.5          ,0,0,0,0,0,0,0,0,0,0 },
                { 14,	14,	  14,		14,	14,	14,		    14,	14,	14,		    5,	5,	5,		5,	5,	5,      0,0,0,              0,0,0,              0,0,0,               0,0,0,             0,0,0                 ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          14,	14,	  14,		14,	14,	14,		    14,	14,	14,		    5,	5,	5,		    5,	5, 5              ,0,0,0,0,0,0,0,0,0,0},
                
                { 1,1,1,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,-100,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          1,1,1,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,-100,0,0,0,0,0,0,0,0},
                
                { 0,0,0,                1,1,1,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,-100,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               1,1,1,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,-100,0,0,0,0,0,0},
                
                { 0,0,0,                0,0,0,              1,1,1,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,-100,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,           0,0,0,              0,0,0,             1,1,1,              0,0,0,              0,0,0                  ,0,0,0,0,0,-100,0,0,0,0},
                
                { 0,0,0,                0,0,0,              0,0,0,               1,1,1,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,-100,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              1,1,1,              0,0,0                  ,0,0,0,0,0,0,0,-100,0,0},
                
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         1,1,1,           0,0,0,              0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,0,0,-100,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              1,1,1                  ,0,0,0,0,0,0,0,0,0,-100},
                
                
                
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,1,1,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,1,1,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,1,1,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,1,1,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          0,0,0,               0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,0,0,1,1},
                /*
                {-5.0 , 3.0 }, 
                {-5.0 , 3.0 }, 
                { 1.0 , 0.0 },  //definizione degli integer
                { 0.0 , 1.0 },  //definizione dei binary
                */
                
                
                
                //condizione numero max viaggi 
                
                { 1,1,1,                0,0,0,              0,0,0,               0,0,0,         0,0,0,          1,1,1,                0,0,0,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                1,1,1,              0,0,0,               0,0,0,         0,0,0,          0,0,0,                1,1,1,             0,0,0,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              1,1,1,               0,0,0,         0,0,0,          0,0,0,                0,0,0,             1,1,1,              0,0,0,              0,0,0                  ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               1,1,1,         0,0,0,          0,0,0,                0,0,0,             0,0,0,              1,1,1,              0,0,0                  ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,              0,0,0,               0,0,0,         1,1,1,          0,0,0,                0,0,0,             0,0,0,              0,0,0,              1,1,1                  ,0,0,0,0,0,0,0,0,0,0},
                
                
                
                
                //integer
                { 1,1,1,                1,1,1,               1,1,1,               1,1,1,          1,1,1,          1,1,1,               1,1,1,              1,1,1,               1,1,1,               1,1,1                   ,0,0,0,0,0,0,0,0,0,0},
                { 0,0,0,                0,0,0,               0,0,0,               0,0,0,          0,0,0,          0,0,0,               0,0,0,              0,0,0,               0,0,0,              0,0,0                   ,1,1,1,1,1,1,1,1,1,1}
                
                
                } ;
        double b[]= { 180.0, 215, 0 ,0, 0, 0, 0, 0, 0 ,0, 0, 0,           1,1,1,1,1,        8,8,8,8,8,      NaN,NaN};
        double c[]= { 18.4,	16.6,16.2,		18.4,16.6,16.2,		18.4,16.6,16.2,		7.5,7.5,7,		7.5,7.5,7,		21.4,16.6,13.2,		21.4,16.6,13.2,		21.4,16.6,13.2,		10.5,7.5,5.5,		10.5,7.5,5.5          ,0,0,0,0,0,0,0,0,0,0   };  
 
        ConsType[] rel= {ConsType.GE, ConsType.GE, ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE,ConsType.LE        ,ConsType.EQ ,ConsType.EQ ,ConsType.EQ ,ConsType.EQ ,ConsType.EQ,        ConsType.LE,  ConsType.LE, ConsType.LE, ConsType.LE, ConsType.LE,       ConsType.INT,  ConsType.BIN       };
 
        LinearObjectiveFunction f = new LinearObjectiveFunction(c, GoalType.MIN);
 
        ArrayList< Constraint > constraints = new ArrayList< Constraint >();
        for(int i=0; i < A.length; i++) {
            constraints.add(new Constraint(A[i], rel[i], b[i]));
        }
 
        MILP lp = new MILP(f,constraints); 
      lp.setThreadNumber(MILPThreadsNumber.N_4);
        SolutionType solution_type=lp.resolve();
 
        if(solution_type==SolutionType.OPTIMUM) { 
            Solution solution=lp.getSolution();
            for(Variable var:solution.getVariables()) {
                SscLogger.log("Nome variabile :"+var.getName() + " valore:"+var.getValue());
            }
            SscLogger.log("Valore ottimo:"+solution.getOptimumValue());
        }   
    }
}